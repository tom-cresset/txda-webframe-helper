var txdaWebframeHelper=(()=>{var g=Object.defineProperty;var y=e=>g(e,"__esModule",{value:!0});var C=(e,t)=>{y(e);for(var n in t)g(e,n,{get:t[n],enumerable:!0})};var X={};C(X,{initialize:()=>j});var i,D=new Uint8Array(16);function u(){if(!i&&(i=typeof crypto!="undefined"&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||typeof msCrypto!="undefined"&&typeof msCrypto.getRandomValues=="function"&&msCrypto.getRandomValues.bind(msCrypto),!i))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return i(D)}var p=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;function T(e){return typeof e=="string"&&p.test(e)}var c=T;var s=[];for(d=0;d<256;++d)s.push((d+256).toString(16).substr(1));var d;function w(e){var t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:0,n=(s[e[t+0]]+s[e[t+1]]+s[e[t+2]]+s[e[t+3]]+"-"+s[e[t+4]]+s[e[t+5]]+"-"+s[e[t+6]]+s[e[t+7]]+"-"+s[e[t+8]]+s[e[t+9]]+"-"+s[e[t+10]]+s[e[t+11]]+s[e[t+12]]+s[e[t+13]]+s[e[t+14]]+s[e[t+15]]).toLowerCase();if(!c(n))throw TypeError("Stringified UUID is invalid");return n}var l=w;function A(e,t,n){e=e||{};var o=e.random||(e.rng||u)();if(o[6]=o[6]&15|64,o[8]=o[8]&63|128,t){n=n||0;for(var a=0;a<16;++a)t[n+a]=o[a];return t}return l(o)}var m=A;var v=(e,t)=>{t._message&&e.addEventListener("message",n=>{t._message?.(n)}),t.onConnected&&e.addEventListener("message",n=>{n.data?.messageType==="txdaConnectionAcknowledgement"&&t.onConnected?.()}),t.onUpdateCurrentDesign&&e.addEventListener("message",n=>{if(n.data?.messageType==="txdaCurrentDesign"){let{metaData:o,data:a}=n.data;t.onUpdateCurrentDesign?.(a,o)}})};var j=(e,t={})=>new Promise((n,o)=>{if(e==="*"){o("Specific target origins must be specified to connect to TXDA installs");return}function a(f){if(f.data?.messageType==="txdaMessagePortTransfer"){if(f.origin!==e){o("Attempted TXDA connection event from unauthorized origin");return}let r=f.ports[0];v(r,t),r.start(),r.postMessage({messageType:"txdaRequestCurrentDesign"});let x={id:m(),port:r,requestCurrentDesign:()=>r.postMessage({messageType:"txdaRequestCurrentDesign"}),disconnect:()=>{r.close(),t.onDisconnected?.()}};n(x),window.removeEventListener("message",a)}}window.addEventListener("message",a),window.parent.postMessage({messageType:"txdaConnectionRequest",windowName:window.name},e),setTimeout(()=>{o("Connection to TXDA failed (timed out)")},1e4)});return X;})();
//# sourceMappingURL=txda-webframe-helper.min.js.map
