{
  "version": 3,
  "sources": ["../src/index.ts", "../node_modules/uuid/dist/esm-browser/rng.js", "../node_modules/uuid/dist/esm-browser/regex.js", "../node_modules/uuid/dist/esm-browser/validate.js", "../node_modules/uuid/dist/esm-browser/stringify.js", "../node_modules/uuid/dist/esm-browser/v4.js", "../src/handlers.ts"],
  "sourcesContent": ["import { v4 as uuidv4 } from 'uuid'\n\nimport { attachHandlers } from \"./handlers\"\nimport { TXDAConnection, TXDAMessageHandlers } from \"./types\"\n\n/**\n * Request a connection to the Torx Design-Analyze application that the current page is embedded in.\n * @param url The URL of the Torx Design-Analyze installation that the current page is embedded in. Used to ensure that only messages from the correct origin URL are accepted.\n * @param handlers Event handlers to execute when events are received from Torx Design-Analyze.\n * @returns\n */\nconst initialize = (url: string, handlers: TXDAMessageHandlers = {}): Promise<TXDAConnection> =>\n  new Promise((resolve, reject) => {\n    const origin = new URL(url).origin\n\n    if (origin === '*') {\n      reject('Specific target origins must be specified to connect to TXDA installs')\n      return\n    }\n\n    function handleWindowEvent (windowEvent: MessageEvent) {\n      if (windowEvent.data?.messageType === 'txdaMessagePortTransfer') {\n        // Ensure the origin of the message matches the specified URL's origin\n        if (windowEvent.origin !== origin) {\n          reject('Attempted TXDA connection event from unauthorized origin')\n          return\n        }\n\n        // Ensure that the source of the event is the window embedding this one\n        if (windowEvent.source !== window.parent) {\n          reject('Attempted TXDA connection event from unauthorized source')\n          return\n        }\n\n        const port = windowEvent.ports[0]\n\n        // Add any given event handlers to the port\n        attachHandlers(port, handlers)\n\n        port.start()\n\n        // Fire an initial request for the current design as soon as the port starts\n        port.postMessage({ messageType: 'txdaRequestCurrentDesign' })\n\n        const txdaConnection: TXDAConnection = {\n          id: uuidv4(),\n          _port: port,\n          requestCurrentDesign: () => port.postMessage({\n            messageType: 'txdaRequestCurrentDesign'\n          }),\n          disconnect: () => {\n            port.close()\n            handlers.onDisconnected?.()\n          }\n        }\n\n        resolve(txdaConnection)\n\n        // After establishing the port, unhook this function from receiving further requests\n        window.removeEventListener('message', handleWindowEvent)\n      }\n    }\n\n    // Listen for events from TXDA for initial setup of MessagePort\n    window.addEventListener('message', handleWindowEvent)\n\n    window.parent.postMessage({\n      messageType: 'txdaConnectionRequest',\n      windowName: window.name,\n    }, origin)\n\n    // If there's no response from TXDA, reject\n    setTimeout(() => {\n      reject('Connection to TXDA failed (timed out)')\n    }, 10000)\n  })\n\nexport { initialize }\n", "// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}", "export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;", "import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;", "import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;", "import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;", "import { Design, Message, TXDAMessageHandlers } from \"./types\"\n\nexport const attachHandlers = (port: MessagePort, handlers: TXDAMessageHandlers) => {\n  if (handlers._message) {\n    port.addEventListener('message', (portEvent: MessageEvent<Message<any>>) => {\n      handlers._message?.(portEvent)\n    })\n  }\n\n  if (handlers.onConnected) {\n    port.addEventListener('message', (portEvent: MessageEvent<Message<undefined>>) => {\n      if (portEvent.data?.messageType === 'txdaConnectionAcknowledgement') {\n        handlers.onConnected?.(portEvent.data?.metaData)\n      }\n    })\n  }\n\n  if (handlers.onUpdateCurrentDesign) {\n    port.addEventListener('message', (portEvent: MessageEvent<Message<Design>>) => {\n      if (portEvent.data?.messageType === 'txdaCurrentDesign') {\n        const {\n          metaData,\n          data: currentDesign\n        } = portEvent.data\n        handlers.onUpdateCurrentDesign?.(currentDesign, metaData)\n      }\n    })\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
