{
  "version": 3,
  "sources": ["../node_modules/uuid/dist/esm-browser/rng.js", "../node_modules/uuid/dist/esm-browser/regex.js", "../node_modules/uuid/dist/esm-browser/validate.js", "../node_modules/uuid/dist/esm-browser/stringify.js", "../node_modules/uuid/dist/esm-browser/v4.js", "../src/handlers.ts", "../src/index.ts"],
  "sourcesContent": ["// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}", "export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;", "import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;", "import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;", "import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;", "import { Design, Message, TXDAMessageHandlers } from \"./types\"\n\nexport const attachHandlers = (port: MessagePort, handlers: TXDAMessageHandlers) => {\n  if (handlers._message) {\n    port.addEventListener('message', (portEvent: MessageEvent<Message<any>>) => {\n      handlers._message?.(portEvent)\n    })\n  }\n\n  if (handlers.onConnected) {\n    port.addEventListener('message', (portEvent: MessageEvent<Message<undefined>>) => {\n      if (portEvent.data?.messageType === 'txdaConnectionAcknowledgement') {\n        handlers.onConnected?.(portEvent.data?.metaData)\n      }\n    })\n  }\n\n  if (handlers.onUpdateCurrentDesign) {\n    port.addEventListener('message', (portEvent: MessageEvent<Message<Design>>) => {\n      if (portEvent.data?.messageType === 'txdaCurrentDesign') {\n        const {\n          metaData,\n          data: currentDesign\n        } = portEvent.data\n        handlers.onUpdateCurrentDesign?.(currentDesign, metaData)\n      }\n    })\n  }\n}\n", "import { v4 as uuidv4 } from 'uuid'\n\nimport { attachHandlers } from \"./handlers\"\nimport { TXDAConnection, TXDAMessageHandlers } from \"./types\"\n\n/**\n * Request a connection to the Torx Design-Analyze application that the current page is embedded in.\n * @param url The URL of the Torx Design-Analyze installation that the current page is embedded in. Used to ensure that only messages from the correct origin URL are accepted.\n * @param handlers Event handlers to execute when events are received from Torx Design-Analyze.\n * @returns\n */\nconst initialize = (url: string, handlers: TXDAMessageHandlers = {}): Promise<TXDAConnection> =>\n  new Promise((resolve, reject) => {\n    const origin = new URL(url).origin\n\n    if (origin === '*') {\n      reject('Specific target origins must be specified to connect to TXDA installs')\n      return\n    }\n\n    function handleWindowEvent (windowEvent: MessageEvent) {\n      if (windowEvent.data?.messageType === 'txdaMessagePortTransfer') {\n        if (windowEvent.origin !== origin) {\n          reject('Attempted TXDA connection event from unauthorized origin')\n          return\n        }\n\n        const port = windowEvent.ports[0]\n\n        // Add any given event handlers to the port\n        attachHandlers(port, handlers)\n\n        port.start()\n\n        // Fire an initial request for the current design as soon as the port starts\n        port.postMessage({ messageType: 'txdaRequestCurrentDesign' })\n\n        const txdaConnection: TXDAConnection = {\n          id: uuidv4(),\n          _port: port,\n          requestCurrentDesign: () => port.postMessage({\n            messageType: 'txdaRequestCurrentDesign'\n          }),\n          disconnect: () => {\n            port.close()\n            handlers.onDisconnected?.()\n          }\n        }\n\n        resolve(txdaConnection)\n\n        // After establishing the port, unhook this function from receiving further requests\n        window.removeEventListener('message', handleWindowEvent)\n      }\n    }\n\n    // Listen for events from TXDA for initial setup of MessagePort\n    window.addEventListener('message', handleWindowEvent)\n\n    window.parent.postMessage({\n      messageType: 'txdaConnectionRequest',\n      windowName: window.name,\n    }, origin)\n\n    // If there's no response from TXDA, reject\n    setTimeout(() => {\n      reject('Connection to TXDA failed (timed out)')\n    }, 10000)\n  })\n\nexport { initialize }\n"],
  "mappings": "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",
  "names": []
}
