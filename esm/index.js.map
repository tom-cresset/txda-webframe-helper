{
  "version": 3,
  "sources": ["../src/handlers.ts", "../src/index.ts"],
  "sourcesContent": ["import { TXDAMessageHandlers } from \"./types\"\n\nexport const attachHandlers = (port: MessagePort, handlers: TXDAMessageHandlers) => {\n  if (handlers._message) {\n    port.addEventListener('message', portEvent => {\n      handlers._message?.(portEvent)\n    })\n  }\n\n  if (handlers.connectionEstablished) {\n    port.addEventListener('message', portEvent => {\n      if (portEvent.data?.messageType === 'txdaConnectionAcknowledgement') {\n        handlers.connectionEstablished?.()\n      }\n    })\n  }\n\n  if (handlers.updateCurrentDesign) {\n    port.addEventListener('message', portEvent => {\n      if (portEvent.data?.messageType === 'txdaCurrentDesign') {\n        const {\n          metaData,\n          data: currentDesign\n        } = portEvent.data\n        handlers.updateCurrentDesign?.(currentDesign, metaData)\n      }\n    })\n  }\n}\n", "import { attachHandlers } from \"./handlers\"\nimport { TXDAConnection, TXDAMessageHandlers } from \"./types\"\n\nconst initialize = (origin: string, handlers: TXDAMessageHandlers = {}): Promise<TXDAConnection> =>\n  new Promise((resolve, reject) => {\n    if (origin === '*') {\n      reject('Specific target origins must be specified to connect to TXDA installs')\n      return\n    }\n\n    // Listen for events from TXDA for initial setup of MessagePort\n    window.addEventListener('message', windowEvent => {\n      if (windowEvent.data?.messageType === 'txdaMessagePortTransfer') {\n        if (windowEvent.origin !== origin) {\n          reject('Attempted TXDA connection event from unauthorized origin')\n          return\n        }\n\n        const port = windowEvent.ports[0]\n\n        // Add any given event handlers to the port\n        attachHandlers(port, handlers)\n\n        port.start()\n\n        // Fire an initial request for the current design as soon as the port starts\n        port.postMessage({ messageType: 'txdaRequestCurrentDesign' })\n\n        const txdaConnection: TXDAConnection = {\n          port,\n          requestCurrentDesign: () => port.postMessage({\n            messageType: 'txdaRequestCurrentDesign'\n          }),\n          disconnect: () => port.close()\n        }\n\n        resolve(txdaConnection)\n      }\n    })\n\n    window.parent.postMessage({\n      messageType: 'txdaConnectionRequest',\n      windowName: window.name,\n    }, origin)\n\n    // If there's no response from TXDA, reject\n    setTimeout(() => {\n      reject('Connection to TXDA failed (timed out)')\n    }, 10000)\n  })\n\nexport { initialize }\n"],
  "mappings": ";AAEO,IAAM,iBAAiB,CAAC,MAAmB,aAAkC;AAClF,MAAI,SAAS,UAAU;AACrB,SAAK,iBAAiB,WAAW,eAAa;AAC5C,eAAS,WAAW;AAAA;AAAA;AAIxB,MAAI,SAAS,uBAAuB;AAClC,SAAK,iBAAiB,WAAW,eAAa;AAC5C,UAAI,UAAU,MAAM,gBAAgB,iCAAiC;AACnE,iBAAS;AAAA;AAAA;AAAA;AAKf,MAAI,SAAS,qBAAqB;AAChC,SAAK,iBAAiB,WAAW,eAAa;AAC5C,UAAI,UAAU,MAAM,gBAAgB,qBAAqB;AACvD,cAAM;AAAA,UACJ;AAAA,UACA,MAAM;AAAA,YACJ,UAAU;AACd,iBAAS,sBAAsB,eAAe;AAAA;AAAA;AAAA;AAAA;;;ACrBtD,IAAM,aAAa,CAAC,QAAgB,WAAgC,OAClE,IAAI,QAAQ,CAAC,SAAS,WAAW;AAC/B,MAAI,WAAW,KAAK;AAClB,WAAO;AACP;AAAA;AAIF,SAAO,iBAAiB,WAAW,iBAAe;AAChD,QAAI,YAAY,MAAM,gBAAgB,2BAA2B;AAC/D,UAAI,YAAY,WAAW,QAAQ;AACjC,eAAO;AACP;AAAA;AAGF,YAAM,OAAO,YAAY,MAAM;AAG/B,qBAAe,MAAM;AAErB,WAAK;AAGL,WAAK,YAAY,EAAE,aAAa;AAEhC,YAAM,iBAAiC;AAAA,QACrC;AAAA,QACA,sBAAsB,MAAM,KAAK,YAAY;AAAA,UAC3C,aAAa;AAAA;AAAA,QAEf,YAAY,MAAM,KAAK;AAAA;AAGzB,cAAQ;AAAA;AAAA;AAIZ,SAAO,OAAO,YAAY;AAAA,IACxB,aAAa;AAAA,IACb,YAAY,OAAO;AAAA,KAClB;AAGH,aAAW,MAAM;AACf,WAAO;AAAA,KACN;AAAA;",
  "names": []
}
